package ru.polardl.homeshopping.GUI;

import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import ru.polardl.homeshopping.Models.Item;
import ru.polardl.homeshopping.Models.Order;
import ru.polardl.homeshopping.Models.OrderList;
import ru.polardl.homeshopping.Models.OrderPosition;
import ru.polardl.homeshopping.Models.OrderState;

public class DetailsOfOrderForm extends javax.swing.JFrame {

    private final DefaultTableModel modelInOrder;
//    private final DefaultTableModel modelPriceList; 
    
    private final int orderID = ShowOrdersForm.orderIDSelected;
    
    private OrderList orderList = MainForm.orderList;
    
    /**
     * Creates new form DetailesOfOrderForm
     */
    public DetailsOfOrderForm() {
        initComponents();
        setTitle("Order Details");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        
        modelInOrder = (DefaultTableModel) tableItemsInOrder.getModel();
//        modelPriceList = (DefaultTableModel) tablePriceList.getModel();
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        
        tableItemsInOrder.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        tableItemsInOrder.getColumnModel().getColumn(5).setCellRenderer(rightRenderer);
        tableItemsInOrder.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tableItemsInOrder.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        
//        tablePriceList.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
//        tablePriceList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        
        
        
        OrderList orderList = MainForm.orderList;
        HashMap<Integer, Order> orderListMap = orderList.getOrderListMap();
        Order order = orderListMap.get(orderID);
        

        orderIDOutput.setText(String.valueOf(orderID));
        orderDateOutput.setText(String.valueOf(order.getOrderDate()));
        discountOut.setText(String.valueOf(order.getDiscount()));
        orderStateOutput.setText(String.valueOf(order.getOrderState()));
        nameOut.setText(order.getClient().getClientName());
        addressOut.setText(order.getClient().getAddress());
        phoneOut.setText(String.valueOf(order.getClient().getPhoneNumber()));
        orderTotalPriceOut.setText(String.valueOf(order.getOrderTotalPrice()));
        
        
        HashMap<Long, OrderPosition> initialOrderPositionMap = order.getOrderPositionMap();
        TreeMap<Long, OrderPosition> sortedOrderPositionMap = new TreeMap<>();
        sortedOrderPositionMap.putAll(initialOrderPositionMap);
        
        for (Map.Entry<Long, OrderPosition> entry : sortedOrderPositionMap.entrySet()) {
            OrderPosition orderPosition = entry.getValue();
            String itemID = String.valueOf(entry.getKey());
            String name = orderPosition.getOrderPosItem().getItemName();
            String color = orderPosition.getOrderPosItem().getColor();
            String price = String.valueOf(orderPosition.getOrderPosItemFixedPrice());
            String quantity = String.valueOf(orderPosition.getOrderPosItemQuantity());
            String totalPrice = String.valueOf(orderPosition.getOrderPosTotalPrice());
            
            modelInOrder.insertRow(modelInOrder.getRowCount(), new Object[] {itemID, name, color, price, quantity, totalPrice});  
        }
        
        
//        HashMap<Long, Item> initialPriceList = MainForm.itemListMap;
//        TreeMap<Long, Item> sortedPriceList = new TreeMap<>();
//        sortedPriceList.putAll(initialPriceList);
//        
//        for (Map.Entry<Long, Item> entry : sortedPriceList.entrySet()) {
//            Item item = entry.getValue();
//            String itemID = String.valueOf(entry.getKey());
//            String name = item.getItemName();
//            String color = item.getColor();
//            String price = String.valueOf(item.getPrice());
//            String leftover = String.valueOf(item.getLeftover());
//            
//            modelPriceList.insertRow(modelPriceList.getRowCount(), new Object[] {itemID, name, color, price, leftover});
//        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        orderIDLable = new javax.swing.JLabel();
        orderIDOutput = new javax.swing.JTextField();
        orderDate = new javax.swing.JLabel();
        orderDateOutput = new javax.swing.JTextField();
        client = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        nameOut = new javax.swing.JTextField();
        address = new javax.swing.JLabel();
        addressOut = new javax.swing.JTextField();
        phone = new javax.swing.JLabel();
        phoneOut = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItemsInOrder = new javax.swing.JTable();
        orderTotalPrice = new javax.swing.JLabel();
        orderTotalPriceOut = new javax.swing.JTextField();
        discount = new javax.swing.JLabel();
        discountOut = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        orderStateOutput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        changeOrderBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        orderIDLable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        orderIDLable.setText("Order ID");

        orderIDOutput.setEditable(false);
        orderIDOutput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        orderIDOutput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        orderIDOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderIDOutputActionPerformed(evt);
            }
        });

        orderDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        orderDate.setText("Order Date");

        orderDateOutput.setEditable(false);
        orderDateOutput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        orderDateOutput.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        client.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        client.setText("Client:");

        name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        name.setText("Name");

        nameOut.setEditable(false);
        nameOut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        address.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        address.setText("Address");

        addressOut.setEditable(false);
        addressOut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        phone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        phone.setText("Phone");

        phoneOut.setEditable(false);
        phoneOut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        tableItemsInOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Name", "Color", "Price per Item", "Quantity", "Total Item Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableItemsInOrder);
        if (tableItemsInOrder.getColumnModel().getColumnCount() > 0) {
            tableItemsInOrder.getColumnModel().getColumn(0).setMinWidth(110);
            tableItemsInOrder.getColumnModel().getColumn(0).setMaxWidth(110);
            tableItemsInOrder.getColumnModel().getColumn(1).setPreferredWidth(150);
            tableItemsInOrder.getColumnModel().getColumn(4).setMaxWidth(65);
        }

        orderTotalPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        orderTotalPrice.setText("Order Total Discounted Price");

        orderTotalPriceOut.setEditable(false);
        orderTotalPriceOut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        orderTotalPriceOut.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        discount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        discount.setText("Discount");

        discountOut.setEditable(false);
        discountOut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        discountOut.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Order State");

        orderStateOutput.setEditable(false);
        orderStateOutput.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("To change this Order press:");

        changeOrderBtn.setText("Change");
        changeOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeOrderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderIDLable)
                            .addComponent(orderDate))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderIDOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(orderDateOutput))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(discount)))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(discountOut, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(orderStateOutput)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(client)
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(address)
                                    .addComponent(phone))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addressOut)
                                    .addComponent(phoneOut, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(name)
                                .addGap(38, 38, 38)
                                .addComponent(nameOut, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(orderTotalPrice)
                        .addGap(18, 18, 18)
                        .addComponent(orderTotalPriceOut, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(changeOrderBtn)
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(discount)
                        .addComponent(discountOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(orderIDLable)
                        .addComponent(orderIDOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderDate)
                    .addComponent(orderDateOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(orderStateOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(client)
                    .addComponent(name)
                    .addComponent(nameOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(address)
                    .addComponent(addressOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phone)
                    .addComponent(phoneOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderTotalPriceOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderTotalPrice))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(changeOrderBtn))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orderIDOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderIDOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderIDOutputActionPerformed

    private void changeOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeOrderBtnActionPerformed
        // TODO add your handling code here:

        if (orderList.getOrderListMap().get(orderID).getOrderState().equals(OrderState.INPROGRESS)) {
            new ChangeOrderForm().setVisible(true);
            dispose();

        } else {
            WrongInputForm.wrongInputMassage = "Forbidden to change the Order with state not \"In progress\"";
            new WrongInputForm().setVisible(true);
        }

    }//GEN-LAST:event_changeOrderBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetailsOfOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetailsOfOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetailsOfOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetailsOfOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DetailsOfOrderForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel address;
    private javax.swing.JTextField addressOut;
    private javax.swing.JButton changeOrderBtn;
    private javax.swing.JLabel client;
    private javax.swing.JLabel discount;
    private javax.swing.JTextField discountOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameOut;
    private javax.swing.JLabel orderDate;
    private javax.swing.JTextField orderDateOutput;
    private javax.swing.JLabel orderIDLable;
    private javax.swing.JTextField orderIDOutput;
    private javax.swing.JTextField orderStateOutput;
    private javax.swing.JLabel orderTotalPrice;
    private javax.swing.JTextField orderTotalPriceOut;
    private javax.swing.JLabel phone;
    private javax.swing.JTextField phoneOut;
    private javax.swing.JTable tableItemsInOrder;
    // End of variables declaration//GEN-END:variables
}
